@tool
extends Control

enum StatusMsg {
	None,
	NothingSelected,
	MultipleNodesSelected,
	Selected,
	SaveSuccesufull,
	SaveFailed,
}

const  PRESET_SAVE_PATH: String =  "res://addons/ez_preset/resources/presets/"

const NONE: = StatusMsg.None
const NOTHING_SELECTED:  = StatusMsg.NothingSelected
const MULTIPLE_NODES_SELECTED: = StatusMsg.MultipleNodesSelected
const SELECTED: = StatusMsg.Selected
const SAVE_SUCCESUFULL: = StatusMsg.SaveSuccesufull
const SAVE_FAILED: = StatusMsg.SaveFailed

@onready var status_label: RichTextLabel = %Status
@onready var save_button: Button = %Save
@onready var preset_name: LineEdit = %PresetName


@onready var presets_data: EzPresetsData = preload("uid://gj412pktplub")

var editor_interface: EditorInterface

var editor_selection: EditorSelection

var selected: Node

var _status_msg: StatusMsg = StatusMsg.None:
	set(val):
		_status_msg = val
		if is_instance_valid(status_label):
			_update_status_msg()

func _ready() -> void:
	editor_selection = editor_interface.get_selection()
	editor_selection.selection_changed.connect(_on_selection_changed)
	save_button.pressed.connect(_on_save_button_pressed)

func _on_save_button_pressed() -> void:
	if _status_msg == SELECTED and is_instance_valid(selected) and preset_name.text != "":
		var res: = crate_preset_resource(selected)
		var full_path: = PRESET_SAVE_PATH  + ("%s.tres" % [preset_name.text])
		if FileAccess.file_exists(full_path):
			var dir := DirAccess.open(PRESET_SAVE_PATH)
			if dir == null:
				print_debug("can't open dir: ", DirAccess.get_open_error())
			else:
				print_debug("can't remove file: ", dir.remove(full_path))
		if ResourceSaver.save(res, full_path) == OK:
			_status_msg = SAVE_SUCCESUFULL
		else:
			_status_msg = SAVE_FAILED

func crate_preset_resource(node: Node) -> EzPresetSave:
	var save: = EzPresetSave.new()
	save.node_type = _get_node_type_name(node)
	for p: Dictionary in node.get_property_list():
		save.params[p["name"]]  = node.get(p.get("name"))
	return save

func _get_node_type_name(node: Node) -> String:
	if !is_instance_valid(node):
		return "INVALID"
	var script: GDScript = node.get_script()
	if script != null:
		var name: = script.get_global_name()
		if name != "":
			return name
	return node.get_class()

func _on_selection_changed() -> void:
	var nodes = editor_selection.get_selected_nodes()
	if nodes.is_empty():
		selected = null
		_status_msg = StatusMsg.NothingSelected
		return
	if nodes.size() > 1:
		selected = null
		_status_msg = StatusMsg.MultipleNodesSelected
		return
	selected = nodes[0]
	_status_msg = StatusMsg.Selected

func _update_status_msg() -> void:
	match _status_msg:
		NONE:
			status_label.text = ""
		NOTHING_SELECTED:
			status_label.text = "Status: [color=gray]Nothing Selected[/color]"
			status_label.tooltip_text = "nothing selected select any singural node in the inspector"
		MULTIPLE_NODES_SELECTED:
			status_label.text = "Status: [color=yellow]Multiple Nodes Selected[/color]"
			status_label.tooltip_text = "multiple nodes selected choose only one node in the inspector"
		SELECTED:
			status_label.text = "Status: [color=green]Node Selected[/color] {%s}" % [selected.name] 
			status_label.tooltip_text = "multiple nodes selected choose only one node in the inspector"
		SAVE_FAILED:
			status_label.text = "Status: [color=red]Save Failed[/color]" 
			status_label.tooltip_text = "Failed To save Resource"
		SAVE_SUCCESUFULL:
			status_label.text = "Status: [color=cyan]Save Succes[/color]" 
			status_label.tooltip_text = "Resource saved succesfully"
